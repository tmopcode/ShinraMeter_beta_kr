<UserControl x:Class="DamageMeter.UI.DpsServer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:l="clr-namespace:Lang;assembly=Lang"
             xmlns:ui="clr-namespace:DamageMeter.UI" 
             xmlns:settings="clr-namespace:TCC.UI.Controls.Settings"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance ui:DpsServerViewModel}">

    <Grid  x:Name="root">
        <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.Resources>
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyFocusVisual}" />
                <Setter Property="settings:CheckBoxExtensions.Size" Value="12" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True" Cursor="Hand">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    CornerRadius="1">
                                    <Grid x:Name="markGrid"
                                      Width="{TemplateBinding settings:CheckBoxExtensions.Size}"
                                      Height="{TemplateBinding settings:CheckBoxExtensions.Size}">
                                        <Path x:Name="base"
                                          Data="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"
                                          Stretch="Uniform"
                                          Width="{TemplateBinding settings:CheckBoxExtensions.Size}"
                                          Height="{TemplateBinding settings:CheckBoxExtensions.Size}"
                                          Margin="0" />
                                        <Path x:Name="optionMark"
                                          Width="{TemplateBinding settings:CheckBoxExtensions.Size}"
                                          Height="{TemplateBinding settings:CheckBoxExtensions.Size}"
                                          Data="M10,17L5,12L6.41,10.58L10,14.17L17.59,6.58L19,8M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z"
                                          Fill="{TemplateBinding BorderBrush}" Margin="0" Opacity="0"
                                          Stretch="Uniform" />
                                        <Rectangle x:Name="indeterminateMark"

                                               Fill="Black" Margin="2" Opacity="0" />
                                    </Grid>
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyFocusVisual}" />
                                    <Setter Property="Padding" Value="4,-1,0,0" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="Black" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="checkBoxBorder" Value="Transparent" />
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="SlateGray" />
                                    <Setter Property="Fill" TargetName="optionMark" Value="SlateGray" />
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="SlateGray" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="indeterminateMark" Value="Black" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="false">
                                    <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="SlateGray" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <!--<Setter Property="Opacity" TargetName="optionMark" Value="1" />-->
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                                    <Setter Property="Fill" TargetName="base"
                                        Value="{Binding ElementName=optionMark, Path=Fill}" />

                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="optionMark"
                                                             Storyboard.TargetProperty="Opacity"
                                                             Duration="0:0:0.2"
                                                             To="1" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="optionMark"
                                                             Storyboard.TargetProperty="Opacity"
                                                             Duration="0:0:0.2"
                                                             To="0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                                    <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                                    <Setter Property="Fill" TargetName="base" Value="LightSlateGray" />

                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{StaticResource LightSecondaryText}" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource LightPrimaryText}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="{StaticResource LightSecondaryText}" />
                <Setter Property="Background" Value="#1ddd" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="CaretBrush" Value="White" />
                <Setter Property="BorderThickness" Value="0 0 0 1" />
                <Setter Property="Margin" Value="5 5 5 4" />
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource LightPrimaryText}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>
            <Border Background="#2000" Grid.RowSpan="10" Grid.ColumnSpan="10" CornerRadius="0"/>
        <Grid Height="30"
              Grid.ColumnSpan="3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Background="#3000" Grid.RowSpan="10" Grid.ColumnSpan="10" CornerRadius="0"/>
            <TextBlock x:Name="ServerLabel"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Center"
                       Margin="0 0"
                       Grid.Column="1"
                       Text="{Binding HostName}" />
            <Button x:Name="LinkIcon"
                    Style="{StaticResource ButtonMainStyle}"
                    Grid.Column="3"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Command="{Binding BrowseUrlCommand}" >
                <Path Data="{StaticResource Svg.Link}" Stretch="Uniform"
                      Width="16" 
                      Margin="8"
                      Height="16"
                      Fill="White"/>
            </Button>
            <Button x:Name="RemoveServerButtonImage"
                    Style="{StaticResource ButtonMainStyle}"
                    Grid.Column="4"
                    VerticalAlignment="Center"
                    ToolTip="{x:Static l:LP.RemoveDpsServer}"
                    Command="{Binding RemoveServerCommand}" >
                <Path Data="{StaticResource Svg.Close}" Stretch="Uniform"
                    Margin="8"
                      Width="14" 
                      Height="14"
                      Fill="{StaticResource LightRed}"/>

            </Button>
            <CheckBox x:Name="Enabled"
                      VerticalAlignment="Center"
                      Margin="8 0"
                      Grid.Column="0"
                      IsChecked="{Binding Enabled, Mode=TwoWay}" />
        </Grid>
        <Grid Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="settingsGrid"
              VerticalAlignment="Top"
              IsEnabled="{Binding Enabled}"
              Margin="5 2">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Enabled}" Value="False">
                            <Setter Property="Opacity" Value=".7" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="2" />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition Height="2" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Row="1" Name="UsernameLabel" VerticalAlignment="Center" Margin="5"
                       HorizontalAlignment="Right"
                       Text="{x:Static l:LP.Username}" />
            <TextBox Grid.Row="1"
                     Grid.Column="1" Width="Auto" Text="{Binding UserName, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                     KeyDown="OnTbKeyDown"
                     Name="UsernameTextbox" />
            <TextBlock Grid.Row="2" Name="AuthLabel" VerticalAlignment="Center" Margin="5"
                       HorizontalAlignment="Right"
                       Text="{x:Static l:LP.AuthToken}" />
            <TextBox Grid.Row="2"
                     KeyDown="OnTbKeyDown"
                     Text="{Binding Token, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                     Grid.Column="1" Name="AuthTokenTextbox" />
            <TextBlock Grid.Row="3" Grid.Column="0" Name="ServerUrlLabel" VerticalAlignment="Center" Margin="5"
                       HorizontalAlignment="Right"
                       Text="{x:Static l:LP.DpsUploadUrl}" />
            <TextBox Grid.Row="3"
                     KeyDown="OnTbKeyDown"
                     Text="{Binding UploadUrl, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                     Grid.Column="1"
                     Name="ServerURLTextbox">
                <TextBox.Style>
                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsUploadUrlValid}" Value="False">
                                <Setter Property="BorderBrush" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>

            </TextBox>
            <TextBlock Grid.Row="4" Name="AllowedAreaUrlLabel" VerticalAlignment="Center" Margin="5"
                       HorizontalAlignment="Right"
                       Text="{x:Static l:LP.AllowedAreaUrl}" />
            <TextBox Grid.Row="4"
                     KeyDown="OnTbKeyDown"
                     Text="{Binding WhitelistUrl, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                     Grid.Column="1"
                     Name="AllowedAreaUrlTextbox">
                <TextBox.Style>
                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsWhitelistUrlValid}" Value="False">
                                <Setter Property="BorderBrush" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>

            </TextBox>
            <TextBlock Grid.Row="5" Name="GlyphUploadUrlLabel" VerticalAlignment="Center" Margin="5"
                       HorizontalAlignment="Right"
                       Text="{x:Static l:LP.GlyphUploadURL}" />
            <TextBox Grid.Row="5"
                     KeyDown="OnTbKeyDown"
                     Text="{Binding GlyphUrl, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                     Grid.Column="1"
                     Name="GlyphUploadUrlTextbox">
                <TextBox.Style>
                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsGlyphUrlValid}" Value="False">
                                <Setter Property="BorderBrush" Value="Red" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>

            </TextBox>
            <Grid.LayoutTransform>
                <ScaleTransform ScaleY="1" />
            </Grid.LayoutTransform>
        </Grid>
        <Grid.LayoutTransform>
            <ScaleTransform ScaleY="1" />
        </Grid.LayoutTransform>
    </Grid>
</UserControl>